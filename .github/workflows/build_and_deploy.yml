name: Build and Publish Docker

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build_and_publish_images:
    runs-on: ubuntu-latest
    env:
      DOCKER_BUILDKIT: 1
      CARGO_INCREMENTAL: 1
      IMAGE: ghcr.io/lucky3028/no-free-lunch_single
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install git-restore-mtime
        run: sudo apt-get update && sudo apt-get install git-restore-mtime -y
      - name: Restore mtime
        run: git restore-mtime

      - uses: actions/cache@v2
        env:
          cache-version: v1
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ env.cache-version }}-${{ github.ref }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            - ${{ runner.os }}-cargo-${{ env.cache-version }}-${{ github.ref }}-
            - ${{ runner.os }}-cargo-${{ env.cache-version }}-

      - name: Build crate
        run: cargo build --release

      - uses: actions/upload-artifact@v2
        with:
          name: my-artifact
          path: ./target/release/no-free-lunch

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: lucky3028
          password: ${{ secrets.GHCR_PAT }}
      - name: Build image
        run: docker build -t $IMAGE:latest --build-arg BUILDKIT_INLINE_CACHE=1 -f Dockerfile .
      - name: Push image
        run: docker push $IMAGE:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_publish_images
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v2
      - name: Make .env
        run: |
          cd attachments
          echo "DISCORD_TOKEN=${{ secrets.DISCORD_TOKEN }}" > .env
          echo "APPLICATION_ID=${{ secrets.APPLICATION_ID }}" >> .env
          cd ../
      - uses: actions/download-artifact@v2
        with:
          name: my-artifact
          path: ./attachments
      - name: Install SSH Key
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.SERVER_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
      - name: Rsync .env, docker-compose.yml, and restart bash
        run: rsync -auvz --delete -e "ssh -p ${{ secrets.SERVER_SSH_PORT }} -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" ./attachments/ ${{ secrets.SERVER_SSH_USER }}@${{ secrets.SERVER_SSH_ADDRESS }}:${{ secrets.SERVER_SSH_PATH }}
      - name: Restart docker
        run: ssh -p ${{ secrets.SERVER_SSH_PORT }} -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.SERVER_SSH_USER }}@${{ secrets.SERVER_SSH_ADDRESS }} "cd ${{ secrets.SERVER_SSH_PATH }};chmod +x restart-docker.sh;./restart-docker.sh"
